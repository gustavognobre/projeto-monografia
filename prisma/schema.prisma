// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN 
  USER
  MEDIC
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? 
  image         String?
  password      String?
  gender        String?
  dateBirth     String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

   exam_data     Exam_data[] // relaciona com os exames do usuÃ¡rio

  medicalPatients      Patient[] @relation("MedicalUserRelation")
  patientProfiles      Patient[] @relation("PatientUserRelation")

}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])
}


model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model Exam {
  id             String       @id @default(cuid())
  name           String
  group          String
  normal_min     Float?
  normal_max     Float?
  intermediary_min Float?
  intermediary_max Float?
  hard_value     Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
  
  exam_data      Exam_data[]  @relation("ExamToExamData")
  
  @@index([id])
}

model Exam_data {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  show      Boolean
  examId    String
  userId    String
  value     Float?
  notes     String?
  dateExam  String?
  
  exam      Exam     @relation("ExamToExamData", fields: [examId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  medicalId   String
  patientId   String

  medicalUser User @relation("MedicalUserRelation", fields: [medicalId], references: [id], onDelete: Cascade)
  patientUser User @relation("PatientUserRelation", fields: [patientId], references: [id], onDelete: Cascade)
}
